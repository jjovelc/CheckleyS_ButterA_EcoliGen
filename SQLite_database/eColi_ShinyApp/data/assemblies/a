Shiny.addCustomMessageHandler("updateGenomeMap", function (data) {
  console.log("Received genome data:", data);

  // Clear previous map (if needed)
  d3.select("#genome-map").selectAll("*").remove();

  const width = 800;
  const height = 800;
  const radius = 300;

  // Create SVG canvas
  const svg = d3
    .select("#genome-map")
    .append("svg")
    .attr("width", width)
    .attr("height", height)
    .append("g")
    .attr("transform", `translate(${width / 2}, ${height / 2})`);

  // Draw genome circle
  svg
    .append("circle")
    .attr("r", radius)
    .attr("fill", "none")
    .attr("stroke", "black")
    .attr("stroke-width", 10);

  // Tooltip for displaying gene information
  const tooltip = d3
    .select("body")
    .append("div")
    .attr("class", "tooltip")
    .style("position", "absolute")
    .style("background-color", "white")
    .style("border", "1px solid black")
    .style("padding", "5px")
    .style("display", "none");

  // Scale for genome positions to angles
  const genomeLength = Math.max(...data.map((d) => d.end));
  const angleScale = d3
    .scaleLinear()
    .domain([0, genomeLength])
    .range([0, 2 * Math.PI]);

  // Draw features (genes) as arcs
  data.forEach((gene) => {
    const arc = d3.arc()
      .innerRadius(radius - 10)
      .outerRadius(radius)
      .startAngle(angleScale(gene.start))
      .endAngle(angleScale(gene.end));

    svg
      .append("path")
      .attr("d", arc)
      .attr("fill", "steelblue")
      .attr("stroke", "black")
      .on("mouseover", function (event) {
        tooltip
          .style("display", "block")
          .style("left", `${event.pageX + 10}px`)
          .style("top", `${event.pageY + 10}px`)
          .html(`<strong>${gene.attributes}</strong><br>${gene.product}`);
      })
      .on("mouseout", function () {
        tooltip.style("display", "none");
      });
  });

  console.log("Genome map rendered.");
});
