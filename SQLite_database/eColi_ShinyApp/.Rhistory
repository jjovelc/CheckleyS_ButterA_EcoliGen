shiny::runApp()
runApp()
runApp()
runApp()
update.packages(oldPkgs = c("withr", "rlang"))
remotes::install_github('satijalab/azimuth', ref = 'master')
library(Azimuth)
devtools::install_version(package = 'Signac', version = package_version('0.2.5'))
library(Azimuth)
BiocManager::install("Signac")
library(Azimuth)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(Seurat)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(Seurat)
BiocManager::install("Seurat")
library(Seurat)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
.rs.restartR()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
.rs.restartR()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
div(class = "dashboardBody",
h2("Analysis Section"),
selectInput(ns("analysisType"), "Select Analysis:", choices = c("Summary", "Find Markers")),
conditionalPanel(
condition = sprintf("input['%s'] == 'Find Markers'", ns("analysisType")),
numericInput(ns("n_markers"), "# of markers:", value = 10, min = 1, step = 1),
helpText("Please enter an integer value.")
),
actionButton(ns("executeAnalysis"), "Execute Analysis"),
br(),
br(),
uiOutput(ns("downloadButtonUI")),  # Dynamic UI for download button
br(),  # Add some space between button and table
div(class = "DT-output",
style = "height: 600px; overflow-y: auto;",
DTOutput(ns("analysisOutput"))
)
)
runApp()
library(ANCOMBC)
library(tidyverse)
library(DT)
library(phyloseq)
# Set working directory
setwd('/Users/juanjovel/jj/dayhoff/pipelines/nextflow/ampliseq')
# Read the metadata from a TSV file
metadata <- read.table("metadata.tsv", header = TRUE, sep = "\t", row.names = 1)
metadata_file <- 'metadata.tsv'
otus_file     <- 'ASV_table.tsv'
taxa_file     <- 'ASV_taxonomy.tsv'
metadata  <- read.table(metadata_file, header = T, row.names = 1, sep = "\t")
taxonomy  <- read.table(taxa_file, header = T, row.names = 1, sep = "\t")
otu_table <- read.table(otus_file, header = T, row.names = 1, sep = "\t")
# Convert OTU table to matrix
otu_matrix <- as.matrix(otu_table)
# Create phyloseq OTU table
otu_table_phyloseq <- otu_table(otu_matrix, taxa_are_rows = T)
# Create phyloseq sample data
sample_data_phyloseq <- sample_data(metadata)
# Create phyloseq taxonomy table
taxonomy_matrix <- as.matrix(taxonomy)
tax_table_phyloseq <- tax_table(taxonomy_matrix)
# Combine into phyloseq object
phyloseq_obj <- phyloseq(otu_table_phyloseq, sample_data_phyloseq, tax_table_phyloseq)
# Agglomerate the data to the family level
my_phylo_family <- tax_glom(phyloseq_obj, taxrank = "Family")
# Calculate relative abundances
my_phylo_family_rel <- transform_sample_counts(my_phylo_family, function(x) x / sum(x))
# Identify the top 20 families across all samples
top_families <- names(sort(taxa_sums(my_phylo_family_rel), decreasing = TRUE))[1:20]
# Prune the phyloseq object to keep only the top 20 families
my_phylo_top20 <- prune_taxa(top_families, my_phylo_family_rel)
# Melt the phyloseq object for ggplot2
phylo_melt <- psmelt(my_phylo_top20)
# Plot stacked bar plot for each sample
ggplot(phylo_melt, aes(x = Sample, y = Abundance, fill = Family)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Top 20 Families per Sample", x = "Sample", y = "Relative Abundance")
# Summarize the data by group
phylo_group <- phylo_melt %>%
group_by(group, Family) %>%
summarize(Abundance = mean(Abundance)) %>%
ungroup()
# Plot stacked bar plot for each group
ggplot(phylo_group, aes(x = group, y = Abundance, fill = Family)) +
geom_bar(stat = "identity") +
labs(title = "Top 20 Families per Group", x = "Group", y = "Relative Abundance")
BiocManager::install("MicrobiomeProfiler")
library(MicrobiomeProfiler)
run_MicrobiomeProfiler()
runApp('~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/eColi_ShinyApp')
runApp('~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/eColi_ShinyApp')
runApp('~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/eColi_ShinyApp')
runApp('~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/eColi_ShinyApp')
runApp('~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/eColi_ShinyApp')
runApp('~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/eColi_ShinyApp')
runApp('~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/eColi_ShinyApp')
runApp('~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/eColi_ShinyApp')
runApp('~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/eColi_ShinyApp')
runApp('~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/eColi_ShinyApp')
runApp('~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/eColi_ShinyApp')
runApp('~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/eColi_ShinyApp')
runApp('~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/eColi_ShinyApp')
runApp('~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/eColi_ShinyApp')
runApp('~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/eColi_ShinyApp')
runApp('~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/eColi_ShinyApp')
runApp('~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/eColi_ShinyApp')
runApp('~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/eColi_ShinyApp')
runApp('~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/eColi_ShinyApp')
runApp('~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/eColi_ShinyApp')
runApp('~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/eColi_ShinyApp')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
install.packages("reticulate")
install.packages("reticulate")
library(DBI)
shiny::runApp()
runApp()
runApp()
runApp()
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/git_repos/EcoliGenomics/SQLite_database/eColi_ShinyApp/modules/ui/tables_ui.R", echo=TRUE)
