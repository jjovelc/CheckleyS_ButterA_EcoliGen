dotplot(ego_up_simp, showCategory = 15, font.size = 16)
dev.off()
file.name <- 'ego_scRNAseq_down_simp_dotPlot.png'
png(file.name, width = 600, height = 900)
dotplot(ego_down_simp, showCategory = 15, font.size = 16)
dev.off()
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/tuanTrang/brendanMcAllister/DESeq2_plus_clusterProfiler.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/tuanTrang/brendanMcAllister/DESeq2_plus_clusterProfiler.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# Plotting with log Y scale
ggplot(df_melted, aes(x = Category, y = Count, fill = Sample)) +
geom_bar(stat = 'identity', position = position_dodge(), alpha=0.7) +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = 'Mutations in Sample2-Tumor and Sample3 Histotripsy (Log Scale)',
x = 'Category', y = 'Count') +
theme_minimal() +
scale_fill_manual(values=c('sample2_tumor'='blue', 'sample3_histotripsy'='orange'))
# Plotting with linear Y scale
ggplot(df_melted, aes(x = Category, y = Count, fill = Sample)) +
geom_bar(stat = 'identity', position = position_dodge(), alpha=0.7) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = 'Mutations in Sample2-Tumor and Sample3-Histotripsy',
x = 'Category', y = 'Count') +
theme_minimal() +
scale_fill_manual(values=c('sample2_tumor'='blue', 'sample3_histotripsy'='orange'))
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/rogerZemp/ZempLab-Jun2024-6410422$/barPlots.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/rogerZemp/ZempLab-Jun2024-6410422$/barPlots.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
# Set working directory
setwd('/Users/juanjovel/OneDrive/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database')
# Read the TSV file
data <- read.table("resFinder_results_report.tsv", row.names = 1, header = TRUE, sep = '\t')
plot_outfile <- "mge_combined_plot.png"
# Read metadata
metadata <- read.table("metadata.tsv", row.names = 1, header = TRUE, sep = '\t')
# Filter out the specific columns
is_not_Box1_Vial_58_53412 <- colnames(data) != "Box1_Vial_58_53412"
# Make metadata and amrs tables IDs the same
metadata$isolate <- gsub("-", "_", metadata$isolate)
data_filtered <- data[, metadata$isolate]
data_filtered <- data[, metadata$isolate]
# Read the TSV file
data <- read.table("resFinder_results_report.tsv", row.names = 1, header = TRUE, sep = '\t')
# Set working directory
setwd('/Users/juanjovel/OneDrive/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database')
# Read the TSV file
data <- read.table("resFinder_results_report.tsv", row.names = 1, header = TRUE, sep = '\t')
plot_outfile <- "mge_combined_plot.png"
# Set working directory
setwd('/Users/juanjovel/OneDrive/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database')
# Read the TSV file
data <- read.table("resFinder_results_report.tsv", row.names = 1, header = TRUE, sep = '\t')
plot_outfile <- "mge_combined_plot.png"
# Read metadata
metadata <- read.table("metadata.tsv", row.names = 1, header = TRUE, sep = '\t')
# Filter out the specific columns
is_not_Box1_Vial_58_53412 <- colnames(data) != "Box1_Vial_58_53412"
# Make metadata and amrs tables IDs the same
metadata$isolate <- gsub("-", "_", metadata$isolate)
data_filtered <- data[, metadata$isolate]
# Set working directory
setwd('/Users/juanjovel/OneDrive/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database')
# Read the TSV file
data <- read.table("resFinder_results_report.tsv", row.names = 1, header = TRUE, sep = '\t')
plot_outfile <- "mge_combined_plot.png"
# Read metadata
metadata <- read.table("metadata.tsv", row.names = 1, header = TRUE, sep = '\t')
# Filter out the specific columns
is_not_Box1_Vial_58_53412 <- colnames(data) != "Box1_Vial_58_53412"
# Make metadata and amrs tables IDs the same
metadata$isolate <- gsub("-", "_", metadata$isolate)
data_filtered <- data[, metadata$isolate]
metadata$isolate
colnames(data)
sort(colnames(data)) == sort(metadata$isolate)
head(sort(metadata$isolate))
head(sort(colnames(data)))
# Make metadata and amrs tables IDs the same
metadata$isolate <- gsub("-", "_", metadata$isolate)
# Make metadata and amrs tables IDs the same
metadata$isolate <- gsub("-", ".", metadata$isolate)
data_filtered <- data[, metadata$isolate]
metadata$isolate
# Make metadata and amrs tables IDs the same
metadata$isolate <- gsub("_", ".", metadata$isolate)
data_filtered <- data[, metadata$isolate]
# Check if all isolates in data_filtered have corresponding metadata
isolates_not_in_metadata <- setdiff(colnames(data_filtered), metadata$isolate)
if (length(isolates_not_in_metadata) > 0) {
stop("The following isolates in data_filtered do not have corresponding metadata: ", paste(isolates_not_in_metadata, collapse = ", "))
}
# Transpose the data
data_t <- t(data_filtered)
# Melt the data for ggplot
melted_data <- melt(as.matrix(data_t))
colnames(melted_data) <- c('Sample', 'AMR', 'Count')
# Check for any discrepancies between Sample and isolate
samples_not_in_metadata <- setdiff(melted_data$Sample, metadata$isolate)
if (length(samples_not_in_metadata) > 0) {
warning("The following samples in melted_data do not have corresponding metadata: ", paste(samples_not_in_metadata, collapse = ", "))
}
# Merge metadata with melted data using 'isolate'
melted_data <- merge(melted_data, metadata, by.x = "Sample", by.y = "isolate", all.x = TRUE)
# Check the merged data
head(melted_data)
# Sort the samples by 'source'
melted_data <- melted_data %>% arrange(source, Sample)
# Ensure the Sample factor levels are in the sorted order
melted_data$Sample <- factor(melted_data$Sample, levels = unique(melted_data$Sample))
# Create a color palette for the 'source' using RColorBrewer
unique_sources <- unique(melted_data$source)
source_colors <- setNames(brewer.pal(length(unique_sources), "Dark2"), unique_sources)
# Create a color palette for the 'mash_group' using RColorBrewer
unique_mash_groups <- unique(melted_data$mash_group)
mash_group_colors <- setNames(brewer.pal(length(unique_mash_groups), "Set3"), unique_mash_groups)
# Create the histogram for AMR abundance per sample
abundance_data <- melted_data %>% group_by(Sample) %>% summarise(Abundance = sum(Count))
abundance_data$Sample <- factor(abundance_data$Sample, levels = levels(melted_data$Sample))
histogram <- ggplot(abundance_data, aes(x = Sample, y = Abundance)) +
geom_bar(stat = "identity", fill = "dodgerblue4") +
theme_minimal() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text for the histogram
axis.ticks.x = element_blank(),  # Remove x-axis ticks for the histogram
axis.text.y = element_text(size = 24)
) +
labs(x = NULL, y = "", title = "")
# Create the heatmap with a solid color for counts and add a gray grid
heatmap <- ggplot() +
geom_tile(data = melted_data, aes(x = Sample, y = AMR, fill = as.factor(Count)), color = "gray") +
scale_fill_manual(values = c("0" = "gray100", "1" = "dodgerblue1", "2" = "red", "3" = "limegreen", "4" = "black", "5", "orange"), name = "Count") +
new_scale_fill() +
geom_tile(data = unique(melted_data[, c("Sample", "mash_group")]),
aes(x = Sample, y = -1, fill = mash_group), height = 5) +
scale_fill_manual(values = mash_group_colors, name = "Mash group", guide = guide_legend(order = 2)) +
new_scale_fill() +
geom_tile(data = unique(melted_data[, c("Sample", "source")]),
aes(x = Sample, y = -7, fill = source), height = 5) +
scale_fill_manual(values = source_colors, name = "Source", guide = guide_legend(order = 1)) +
theme_minimal() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text
axis.ticks.x = element_blank(),  # Remove x-axis ticks
axis.text.y = element_text(size = 6),
plot.margin = margin(10, 10, 10, 10),
legend.position = "right",
axis.title.y = element_text(size = 32),
legend.text = element_text(size = 32),  # Increase legend text size
legend.title = element_text(size = 32)  # Increase legend title size
) +
labs(x = NULL, y = "Mobile genetic elements", title = "")
# Create the heatmap with a solid color for counts and add a gray grid
heatmap <- ggplot() +
geom_tile(data = melted_data, aes(x = Sample, y = AMR, fill = as.factor(Count)), color = "gray") +
scale_fill_manual(values = c("0" = "gray100", "1" = "dodgerblue1", "2" = "red", "3" = "limegreen", "4" = "black", "5", "orange"), name = "Count") +
new_scale_fill() +
geom_tile(data = unique(melted_data[, c("Sample", "mash_group")]),
aes(x = Sample, y = -1, fill = mash_group), height = 5) +
scale_fill_manual(values = mash_group_colors, name = "Mash group", guide = guide_legend(order = 2)) +
#new_scale_fill() +
geom_tile(data = unique(melted_data[, c("Sample", "source")]),
aes(x = Sample, y = -7, fill = source), height = 5) +
scale_fill_manual(values = source_colors, name = "Source", guide = guide_legend(order = 1)) +
theme_minimal() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text
axis.ticks.x = element_blank(),  # Remove x-axis ticks
axis.text.y = element_text(size = 6),
plot.margin = margin(10, 10, 10, 10),
legend.position = "right",
axis.title.y = element_text(size = 32),
legend.text = element_text(size = 32),  # Increase legend text size
legend.title = element_text(size = 32)  # Increase legend title size
) +
labs(x = NULL, y = "Mobile genetic elements", title = "")
# Create the heatmap with a solid color for counts and add a gray grid
heatmap <- ggplot() +
geom_tile(data = melted_data, aes(x = Sample, y = AMR, fill = as.factor(Count)), color = "gray") +
scale_fill_manual(values = c("0" = "gray100", "1" = "dodgerblue1", "2" = "red", "3" = "limegreen", "4" = "black", "5", "orange"), name = "Count") +
#new_scale_fill() +
geom_tile(data = unique(melted_data[, c("Sample", "mash_group")]),
aes(x = Sample, y = -1, fill = mash_group), height = 5) +
scale_fill_manual(values = mash_group_colors, name = "Mash group", guide = guide_legend(order = 2)) +
#new_scale_fill() +
geom_tile(data = unique(melted_data[, c("Sample", "source")]),
aes(x = Sample, y = -7, fill = source), height = 5) +
scale_fill_manual(values = source_colors, name = "Source", guide = guide_legend(order = 1)) +
theme_minimal() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text
axis.ticks.x = element_blank(),  # Remove x-axis ticks
axis.text.y = element_text(size = 6),
plot.margin = margin(10, 10, 10, 10),
legend.position = "right",
axis.title.y = element_text(size = 32),
legend.text = element_text(size = 32),  # Increase legend text size
legend.title = element_text(size = 32)  # Increase legend title size
) +
labs(x = NULL, y = "Mobile genetic elements", title = "")
# Combine the histogram and heatmap using patchwork
combined_plot <- histogram / heatmap + plot_layout(heights = c(2, 10))
# Display the combined plot
print(combined_plot)
# Optionally, save the plot
ggsave(plot_outfile, combined_plot, width = 30, height = 20, dpi = 300)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plotAMRs_MGE.R", echo=TRUE)
library(ggnewscale)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plotAMRs_MGE.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
library(RColorBrewer)
library(ggplot2)
library(reshape2)
library(dplyr)
library(tibble)
library(patchwork)
library(ggnewscale)
# Set working directory
setwd('/Users/juanjovel/OneDrive/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database')
# Read the TSV file
data <- read.table("resFinder_results_report.tsv", row.names = 1, header = TRUE, sep = '\t')
plot_outfile <- "resFinder_combined_plot.png"
# Read metadata
metadata <- read.table("metadata.tsv", row.names = 1, header = TRUE, sep = '\t')
# Filter out the specific columns
is_not_Box1_Vial_58_53412 <- colnames(data) != "Box1_Vial_58_53412"
# Read the TSV file
data <- read.table("resFinder_results_report.tsv", row.names = 1, header = TRUE, sep = '\t')
plot_outfile <- "resFinder_combined_plot.png"
# Read metadata
metadata <- read.table("metadata.tsv", row.names = 1, header = TRUE, sep = '\t')
# Make metadata and amrs tables IDs the same
metadata$isolate <- gsub("_", ".", metadata$isolate)
data_filtered <- data[, metadata$isolate]
metadata$isolate
head(metadata$isolate)
# Make metadata and amrs tables IDs the same
metadata$isolate <- gsub("-", ".", metadata$isolate)
data_filtered <- data[, metadata$isolate]
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plotAMRs_MGE.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
head(metadata$isolate)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
head(colnames(data))
head(metadata$isolate)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
# Set working directory
setwd('/Users/juanjovel/OneDrive/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database')
# Read the TSV file
data <- read.table("resFinder_results_report.tsv", row.names = 1, header = TRUE, sep = '\t')
plot_outfile <- "resFinder_combined_plot.png"
# Read metadata
metadata <- read.table("metadata.tsv", row.names = 1, header = TRUE, sep = '\t')
# Replace hyphens with underscores in metadata isolate names
metadata$isolate <- gsub("-", ".", metadata$isolate)
# Ensure data columns match metadata isolates
data_filtered <- data[, metadata$isolate]
data_filtered
# Replace hyphens with underscores in metadata isolate names
metadata$isolate <- gsub("-", ".", metadata$isolate)
# Ensure data columns match metadata isolates
data_filtered <- data[, metadata$isolate]
# Check for isolates not in metadata
isolates_not_in_metadata <- setdiff(colnames(data_filtered), metadata$isolate)
if (length(isolates_not_in_metadata) > 0) {
stop("The following isolates in data_filtered do not have corresponding metadata: ", paste(isolates_not_in_metadata, collapse = ", "))
}
# Transpose the data
data_t <- t(data_filtered)
data_t
# Melt the data for ggplot
melted_data <- melt(as.matrix(data_t))
melted_data
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plotAMRs_MGE.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
getwd()
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plotAMRs.R", echo=TRUE)
metadata$isolate
head(metadata$isolate)
head(colnames(data))
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plotAMRs.R", echo=TRUE)
head(colnames(data))
head(metadata$isolate)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plotAMRs.R", echo=TRUE)
head(colnames(data), n=50)
head(metadata$isolate, n=100)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plotAMRs.R", echo=TRUE)
# Set working directory
setwd('/Users/juanjovel/OneDrive/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database')
# Read the TSV file
data <- read.table("amrp_results_report_core.tsv", row.names = 1, header = TRUE, sep = '\t')
plot_outfile <- "amrp_results_report_core_plot.png"
# Read metadata
metadata <- read.table("metadata.tsv", row.names = 1, header = TRUE, sep = '\t')
# Filter out the specific columns
is_not_EC2019AMR0197 <- colnames(data) != "EC2019AMR0197"
data_filtered <- data[, is_not_EC2019AMR0197]
# Make metadata and amrs tables IDs the same
metadata$isolate <- gsub("-", ".", metadata$isolate)
data_filtered <- data[, metadata$isolate]
# Check if all isolates in data_filtered have corresponding metadata
isolates_not_in_metadata <- setdiff(colnames(data_filtered), metadata$isolate)
if (length(isolates_not_in_metadata) > 0) {
stop("The following isolates in data_filtered do not have corresponding metadata: ", paste(isolates_not_in_metadata, collapse = ", "))
}
# Transpose the data
data_t <- t(data_filtered)
# Melt the data for ggplot
melted_data <- melt(as.matrix(data_t))
colnames(melted_data) <- c('Sample', 'AMR', 'Count')
# Check for any discrepancies between Sample and isolate
samples_not_in_metadata <- setdiff(melted_data$Sample, metadata$isolate)
if (length(samples_not_in_metadata) > 0) {
warning("The following samples in melted_data do not have corresponding metadata: ", paste(samples_not_in_metadata, collapse = ", "))
}
# Merge metadata with melted data using 'isolate'
melted_data <- merge(melted_data, metadata, by.x = "Sample", by.y = "isolate", all.x = TRUE)
# Check the merged data
head(melted_data)
# Sort the samples by 'source'
melted_data <- melted_data %>% arrange(source, Sample)
# Ensure the Sample factor levels are in the sorted order
melted_data$Sample <- factor(melted_data$Sample, levels = unique(melted_data$Sample))
# Create a color palette for the 'source' using RColorBrewer
unique_sources <- unique(melted_data$source)
source_colors <- setNames(brewer.pal(length(unique_sources), "Dark2"), unique_sources)
# Create a color palette for the 'mash_group' using RColorBrewer
unique_mash_groups <- unique(melted_data$mash_group)
mash_group_colors <- setNames(brewer.pal(length(unique_mash_groups), "Set3"), unique_mash_groups)
# Create the histogram for AMR abundance per sample
abundance_data <- melted_data %>% group_by(Sample) %>% summarise(Abundance = sum(Count))
data[,EC01SH18588003401]
data[,"EC01SH18588003401"]
data[,"EC2019AMR1186"]
head(colnames(data))
data[,"Box1.47614"]
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
head(melted_data)
# Set working directory
setwd('/Users/juanjovel/OneDrive/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database')
# Read the TSV file
data <- read.table("amrp_results_report_core.tsv", row.names = 1, header = TRUE, sep = '\t')
plot_outfile <- "amrp_results_report_core_plot.png"
# Read metadata
metadata <- read.table("metadata.tsv", row.names = 1, header = TRUE, sep = '\t')
# Filter out the specific columns
is_not_EC2019AMR0197 <- colnames(data) != "EC2019AMR0197"
data_filtered <- data[, is_not_EC2019AMR0197]
# Make metadata and amrs tables IDs the same
metadata$isolate <- gsub("-", ".", metadata$isolate)
data_filtered <- data[, metadata$isolate]
# Check if all isolates in data_filtered have corresponding metadata
isolates_not_in_metadata <- setdiff(colnames(data_filtered), metadata$isolate)
if (length(isolates_not_in_metadata) > 0) {
stop("The following isolates in data_filtered do not have corresponding metadata: ", paste(isolates_not_in_metadata, collapse = ", "))
}
# Transpose the data
data_t <- t(data_filtered)
# Melt the data for ggplot
melted_data <- melt(as.matrix(data_t))
colnames(melted_data) <- c('Sample', 'AMR', 'Count')
# Check for any discrepancies between Sample and isolate
samples_not_in_metadata <- setdiff(melted_data$Sample, metadata$isolate)
if (length(samples_not_in_metadata) > 0) {
warning("The following samples in melted_data do not have corresponding metadata: ", paste(samples_not_in_metadata, collapse = ", "))
}
# Merge metadata with melted data using 'isolate'
melted_data <- merge(melted_data, metadata, by.x = "Sample", by.y = "isolate", all.x = TRUE)
# Check the merged data
head(melted_data)
# Sort the samples by 'source'
melted_data <- melted_data %>% arrange(source, Sample)
# Ensure the Sample factor levels are in the sorted order
melted_data$Sample <- factor(melted_data$Sample, levels = unique(melted_data$Sample))
# Create a color palette for the 'source' using RColorBrewer
unique_sources <- unique(melted_data$source)
source_colors <- setNames(brewer.pal(length(unique_sources), "Dark2"), unique_sources)
# Create a color palette for the 'mash_group' using RColorBrewer
unique_mash_groups <- unique(melted_data$mash_group)
mash_group_colors <- setNames(brewer.pal(length(unique_mash_groups), "Set3"), unique_mash_groups)
# Create the histogram for AMR abundance per sample
abundance_data <- melted_data %>% group_by(Sample) %>% summarise(Abundance = sum(Count))
abundance_data$Sample <- factor(abundance_data$Sample, levels = levels(melted_data$Sample))
# Set working directory
setwd('/Users/juanjovel/OneDrive/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database')
# Read the TSV file
data <- read.table("resFinder_results_report.tsv", row.names = 1, header = TRUE, sep = '\t')
plot_outfile <- "resFinder_results_report_plot.png"
# Read metadata
metadata <- read.table("metadata.tsv", row.names = 1, header = TRUE, sep = '\t')
# Replace hyphens with underscores in metadata isolate names
metadata$isolate <- gsub("-", ".", metadata$isolate)
# Ensure data columns match metadata isolates
data_filtered <- data[, metadata$isolate]
# Check for isolates not in metadata
isolates_not_in_metadata <- setdiff(colnames(data_filtered), metadata$isolate)
if (length(isolates_not_in_metadata) > 0) {
stop("The following isolates in data_filtered do not have corresponding metadata: ", paste(isolates_not_in_metadata, collapse = ", "))
}
# Transpose the data
data_t <- t(data_filtered)
# Melt the data for ggplot
melted_data <- melt(as.matrix(data_t))
colnames(melted_data) <- c('Sample', 'AMR', 'Count')
# Merge metadata with melted data using 'isolate'
melted_data <- merge(melted_data, metadata, by.x = "Sample", by.y = "isolate", all.x = TRUE)
# Sort the samples by 'source'
melted_data <- melted_data %>% arrange(source, Sample)
# Ensure the Sample factor levels are in the sorted order
melted_data$Sample <- factor(melted_data$Sample, levels = unique(melted_data$Sample))
# Create a color palette for the 'source' using RColorBrewer
unique_sources <- unique(melted_data$source)
source_colors <- setNames(brewer.pal(length(unique_sources), "Dark2"), unique_sources)
# Create a color palette for the 'mash_group' using RColorBrewer
unique_mash_groups <- unique(melted_data$mash_group)
mash_group_colors <- setNames(brewer.pal(length(unique_mash_groups), "Set3"), unique_mash_groups)
# Create a color palette for 'Count' using RColorBrewer's 'Set1' palette
count_colors <- c(
"0" = "white",
"1" = "dodgerblue1",
"2" = "red",
"3" = "limegreen",
"4" = "black",
"5" = "orange",
"6" = "purple",
"7" = "brown",
"8" = "pink"
)
# Create the histogram for AMR abundance per sample
abundance_data <- melted_data %>% group_by(Sample) %>% summarise(Abundance = sum(Count))
abundance_data
melted_data
class(melted_data$Count)
data <- read.table("amrp_results_report-core.tsv", row.names = 1, header = TRUE, sep = '\t')
# Read metadata
metadata <- read.table("metadata.tsv", row.names = 1, header = TRUE, sep = '\t')
# Replace hyphens with underscores in metadata isolate names
metadata$isolate <- gsub("-", ".", metadata$isolate)
# Ensure data columns match metadata isolates
data_filtered <- data[, metadata$isolate]
# Check for isolates not in metadata
isolates_not_in_metadata <- setdiff(colnames(data_filtered), metadata$isolate)
if (length(isolates_not_in_metadata) > 0) {
stop("The following isolates in data_filtered do not have corresponding metadata: ", paste(isolates_not_in_metadata, collapse = ", "))
}
# Transpose the data
data_t <- t(data_filtered)
# Melt the data for ggplot
melted_data <- melt(as.matrix(data_t))
colnames(melted_data) <- c('Sample', 'AMR', 'Count')
# Merge metadata with melted data using 'isolate'
melted_data <- merge(melted_data, metadata, by.x = "Sample", by.y = "isolate", all.x = TRUE)
# Sort the samples by 'source'
melted_data <- melted_data %>% arrange(source, Sample)
# Ensure the Sample factor levels are in the sorted order
melted_data$Sample <- factor(melted_data$Sample, levels = unique(melted_data$Sample))
# Create a color palette for the 'source' using RColorBrewer
unique_sources <- unique(melted_data$source)
source_colors <- setNames(brewer.pal(length(unique_sources), "Dark2"), unique_sources)
# Create a color palette for the 'mash_group' using RColorBrewer
unique_mash_groups <- unique(melted_data$mash_group)
mash_group_colors <- setNames(brewer.pal(length(unique_mash_groups), "Set3"), unique_mash_groups)
# Create a color palette for 'Count' using RColorBrewer's 'Set1' palette
count_colors <- c(
"0" = "white",
"1" = "dodgerblue1",
"2" = "red",
"3" = "limegreen",
"4" = "black",
"5" = "orange",
"6" = "purple",
"7" = "brown",
"8" = "pink"
)
# Create the histogram for AMR abundance per sample
abundance_data <- melted_data %>% group_by(Sample) %>% summarise(Abundance = sum(Count))
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plotAMRs.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
head(metadata$isolate)
# Ensure data columns match metadata isolates
data_filtered <- data[, metadata$isolate]
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sylviaCheckley/alyssaButters/eColi_genomics/SQLite_database/plot_AMRs_resfinder.R", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
